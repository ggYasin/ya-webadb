{"version":3,"file":"static/chunks/pages/scrcpy-4029353c68075646.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.55.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/?6334","webpack://_N_E/./pages/scrcpy.tsx","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/types.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_22.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { notifyHostChanged } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var id = props.id, className = props.className;\n    React.useEffect(function () {\n        notifyHostChanged(id);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        notifyHostChanged(id);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className) }));\n};\nvar useUnmount = function (unmountFunction) {\n    var unmountRef = React.useRef(unmountFunction);\n    unmountRef.current = unmountFunction;\n    React.useEffect(function () { return function () {\n        if (unmountRef.current) {\n            unmountRef.current();\n        }\n    }; }, []);\n};\n//# sourceMappingURL=LayerHost.js.map","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { ADB_SYNC_MAX_PACKET_SIZE, ChunkStream, InspectStream, ReadableStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, H264Decoder, H264DecoderConstructor, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_22, ScrcpyScreenOrientation, TinyH264Decoder, VideoStreamPacket, WebCodecsDecoder } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { DemoModePanel, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, RouteStackProps } from \"../utils\";\nimport { ProgressStream } from \"./file-manager\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nclass KeyRepeater {\n    key: AndroidKeyCode;\n    client: ScrcpyClient;\n\n    delay: number;\n    interval: number;\n\n    onRelease: VoidFunction | undefined;\n\n    constructor(key: AndroidKeyCode, client: ScrcpyClient, delay = 0, interval = 0) {\n        this.key = key;\n        this.client = client;\n\n        this.delay = delay;\n        this.interval = interval;\n    }\n\n    async press() {\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n\n        if (this.delay === 0) {\n            return;\n        }\n\n        const timeoutId = setTimeout(async () => {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode: this.key,\n                repeat: 1,\n                metaState: 0,\n            });\n\n            if (this.interval === 0) {\n                return;\n            }\n\n            const intervalId = setInterval(async () => {\n                await this.client.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: this.key,\n                    repeat: 1,\n                    metaState: 0,\n                });\n            }, this.interval);\n            this.onRelease = () => clearInterval(intervalId);\n        }, this.delay);\n        this.onRelease = () => clearTimeout(timeoutId);\n    }\n\n    async release() {\n        this.onRelease?.();\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n    }\n}\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n    selectedEncoder: string | undefined = undefined;\n\n    decoders: { name: string; factory: H264DecoderConstructor; }[] = [{\n        name: 'TinyH264 (Software)',\n        factory: TinyH264Decoder,\n    }];\n    selectedDecoder: { name: string, factory: H264DecoderConstructor; } = this.decoders[0];\n    decoder: H264Decoder | undefined = undefined;\n\n    resolution = 1080;\n    bitRate = 4_000_000;\n    tunnelForward = false;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    homeKeyRepeater: KeyRepeater | undefined = undefined;\n    appSwitchKeyRepeater: KeyRepeater | undefined = undefined;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'NavigationBar',\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: 'Navigation Bar',\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            selectedDecoder: observable.ref,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            handleCurrentEncoderChange: action.bound,\n            handleSelectedDecoderChange: action.bound,\n            handleResolutionChange: action.bound,\n            handleTunnelForwardChange: action.bound,\n            handleBitRateChange: action.bound,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n            homeKeyRepeater: false,\n            appSwitchKeyRepeater: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.selectedEncoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            if (this.client) {\n                this.homeKeyRepeater = new KeyRepeater(AndroidKeyCode.Home, this.client);\n                this.appSwitchKeyRepeater = new KeyRepeater(AndroidKeyCode.AppSwitch, this.client);\n            } else {\n                this.homeKeyRepeater = undefined;\n                this.appSwitchKeyRepeater = undefined;\n            }\n        });\n\n        let fpsIntervalId: any;\n        autorun(() => {\n            if (this.decoder) {\n                const decoder = this.decoder;\n                fpsIntervalId = setInterval(action(() => {\n                    this.log.push(`[renderer] FPS: ${decoder.fpsCounter.value}`);\n                }), 1000);\n            } else {\n                clearInterval(fpsIntervalId);\n            }\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    name: 'WebCodecs',\n                    factory: WebCodecsDecoder,\n                });\n                this.selectedDecoder = this.decoders[0];\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!state.selectedDecoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((progress) => {\n                        this.serverUploadedSize = progress;\n                    })))\n                    .pipeTo(pushServer(globalState.device));\n\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_22({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.tunnelForward,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            // Run scrcpy once will delete the server file\n            // Re-push it\n            await new ReadableStream<Uint8Array>({\n                start(controller) {\n                    controller.enqueue(serverBuffer);\n                    controller.close();\n                },\n            })\n                .pipeTo(pushServer(globalState.device));\n\n            const factory = this.selectedDecoder.factory;\n            const decoder = new factory();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const options = new ScrcpyOptions1_22({\n                logLevel: ScrcpyLogLevel.Debug,\n                maxSize: this.resolution,\n                bitRate: this.bitRate,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                tunnelForward: this.tunnelForward,\n                encoderName: this.selectedEncoder ?? encoders[0],\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: new CodecOptions({\n                    profile: decoder.maxProfile,\n                    level: decoder.maxLevel,\n                }),\n            });\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            const client = await ScrcpyClient.start(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(new WritableStream<string>({\n                write: action((line) => {\n                    this.log.push(line);\n                }),\n            }));\n\n            client.videoStream\n                .pipeThrough(new InspectStream(action((packet: VideoStreamPacket) => {\n                    if (packet.type === 'configuration') {\n                        const { croppedWidth, croppedHeight, } = packet.data;\n                        this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                        this.width = croppedWidth;\n                        this.height = croppedHeight;\n                    }\n                })))\n                .pipeTo(decoder.writable)\n                .catch(() => { });\n\n            client.exit.then(() => this.stop());\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e.message);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n\n        runInAction(() => {\n            this.client = undefined;\n            this.decoder = undefined;\n            this.running = false;\n        });\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.homeKeyRepeater?.press();\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.homeKeyRepeater?.release();\n    };\n\n    handleAppSwitchPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.appSwitchKeyRepeater?.press();\n    };\n\n    handleAppSwitchPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.appSwitchKeyRepeater?.release();\n    };\n\n    handleCurrentEncoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedEncoder = option.text;\n    }\n\n    handleSelectedDecoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedDecoder = option.data;\n    }\n\n    handleResolutionChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.resolution = +value;\n    }\n\n    handleBitRateChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.bitRate = +value;\n    }\n\n    handleTunnelForwardChange(event: React.MouseEvent<HTMLElement>, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n\n        this.tunnelForward = checked;\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const view = this.rendererContainer!.getBoundingClientRect();\n        const pointerViewX = clientX - view.x;\n        const pointerViewY = clientY - view.y;\n        const pointerScreenX = clamp(pointerViewX / view.width, 0, 1) * this.width;\n        const pointerScreenY = clamp(pointerViewY / view.height, 0, 1) * this.height;\n\n        return {\n            x: pointerScreenX,\n            y: pointerScreenY,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const bottomElement = useMemo(() =>\n        state.navigationBarVisible && (\n            <Stack verticalFill horizontalAlign=\"center\" style={{ height: '40px', background: '#999' }}>\n                <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                    <IconButton\n                        iconProps={{ iconName: Icons.Play }}\n                        style={{ transform: 'rotate(180deg)', color: 'white' }}\n                        onPointerDown={state.handleBackPointerDown}\n                        onPointerUp={state.handleBackPointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Circle }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleHomePointerDown}\n                        onPointerUp={state.handleHomePointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Stop }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleAppSwitchPointerDown}\n                        onPointerUp={state.handleAppSwitchPointerUp}\n                    />\n                </Stack>\n            </Stack>\n        ),\n        [state.navigationBarVisible]\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.width}\n                    height={state.height}\n                    bottomElement={bottomElement}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    <Dropdown\n                        label=\"Encoder\"\n                        options={state.encoders.map(item => ({ key: item, text: item }))}\n                        selectedKey={state.selectedEncoder}\n                        placeholder=\"Connect once to retrieve encoder list\"\n                        onChange={state.handleCurrentEncoderChange}\n                    />\n\n                    {state.decoders.length > 1 && (\n                        <Dropdown\n                            label=\"Decoder\"\n                            options={state.decoders.map(item => ({ key: item.name, text: item.name, data: item }))}\n                            selectedKey={state.selectedDecoder.name}\n                            onChange={state.handleSelectedDecoderChange}\n                        />\n                    )}\n\n                    <SpinButton\n                        label=\"Max Resolution (longer side, 0 = unlimited)\"\n                        labelPosition={Position.top}\n                        value={state.resolution.toString()}\n                        min={0}\n                        max={2560}\n                        step={100}\n                        onChange={state.handleResolutionChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Bit Rate\"\n                        labelPosition={Position.top}\n                        value={state.bitRate.toString()}\n                        min={100}\n                        max={10_000_000}\n                        step={100}\n                        onChange={state.handleBitRateChange}\n                    />\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>Use forward connection{' '}</span>\n                                <TooltipHost content=\"Old Android devices may not support reverse connection when using ADB over WiFi\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.tunnelForward}\n                        onChange={state.handleTunnelForwardChange}\n                    />\n                </div>\n\n                <DemoModePanel\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n","export default '1.22';","import Struct, { placeholder } from '@yume-chan/struct';\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 6] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 7] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 8] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 9] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 10] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectTouch)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectText)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectKeycode)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\n//# sourceMappingURL=message.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, AdbNoneSubprocessProtocol, DecodeUtf8Stream, InspectStream, TransformStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage } from './message.js';\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(adb, options, process, videoStream, controlStream) {\n        this.clipboardChangeEvent = new EventEmitter();\n        this.lastTouchMessage = 0;\n        this._adb = adb;\n        this.options = options;\n        this.process = process;\n        this._stdout = process.stdout\n            .pipeThrough(new DecodeUtf8Stream())\n            .pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                for (const line of splitLines(chunk)) {\n                    if (line === '') {\n                        continue;\n                    }\n                    controller.enqueue(line);\n                }\n            },\n        }));\n        this._videoStream = options\n            .parseVideoStream(videoStream)\n            .pipeThrough(new InspectStream(packet => {\n            if (packet.type === 'configuration') {\n                this._screenWidth = packet.data.croppedWidth;\n                this._screenHeight = packet.data.croppedHeight;\n            }\n        }));\n        if (controlStream) {\n            const buffered = new AdbBufferedStream(controlStream);\n            this._controlStreamWriter = controlStream.writable.getWriter();\n            (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    while (true) {\n                        const type = yield buffered.read(1);\n                        switch (type[0]) {\n                            case 0:\n                                const { content } = yield ClipboardMessage.deserialize(buffered);\n                                this.clipboardChangeEvent.fire(content);\n                                break;\n                            default:\n                                throw new Error('unknown control message type');\n                        }\n                    }\n                }\n                catch (_a) {\n                    // TODO: Scrcpy: handle error\n                }\n            }))();\n        }\n    }\n    static getEncoders(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Disable control for faster connection in 1.22+\n            options.value.control = false;\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            const client = yield ScrcpyClient.start(adb, path, version, options);\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            yield client.stdout.pipeTo(new WritableStream({\n                write(line) {\n                    const match = line.match(encoderNameRegex);\n                    if (match) {\n                        encoders.push(match[1]);\n                    }\n                },\n            }));\n            return encoders;\n        });\n    }\n    static start(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const connection = options.createConnection(adb);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield adb.subprocess.spawn([\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbNoneSubprocessProtocol],\n                });\n                const result = yield Promise.race([\n                    process.exit,\n                    connection.getStreams(),\n                ]);\n                if (typeof result === 'number') {\n                    throw new Error('scrcpy server exited prematurely');\n                }\n                const [videoStream, controlStream] = result;\n                return new ScrcpyClient(adb, options, process, videoStream, controlStream);\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    get adb() { return this._adb; }\n    get stdout() { return this._stdout; }\n    get exit() { return this.process.exit; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get videoStream() { return this._videoStream; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    checkControlStream(caller) {\n        if (!this._controlStreamWriter) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n        return this._controlStreamWriter;\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectKeyCode');\n            yield controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectKeycode })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectText');\n            yield controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: ScrcpyControlMessageType.InjectText,\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectTouch');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            // TODO: Scrcpy: investigate how to throttle touch events\n            // because 60FPS may still be too high\n            const now = Date.now();\n            if (now - this.lastTouchMessage < 16 &&\n                [AndroidMotionEventAction.Move, AndroidMotionEventAction.HoverMove].includes(message.action)) {\n                return;\n            }\n            this.lastTouchMessage = now;\n            yield controlStream.write(ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectTouch, screenWidth: this.screenWidth, screenHeight: this.screenHeight })));\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectScroll');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = this.options.serializeInjectScrollControlMessage(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectScroll, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n            const buffer = this.options.serializeBackOrScreenOnControlMessage({\n                type: ScrcpyControlMessageType.BackOrScreenOn,\n                action,\n            });\n            if (buffer) {\n                yield controlStream.write(buffer);\n            }\n        });\n    }\n    close() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // No need to close streams. Kill the process will destroy them from the other side.\n            yield ((_a = this.process) === null || _a === void 0 ? void 0 : _a.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\nexport function encodeUtf8(input) {\n    return Utf8Encoder.encode(input).buffer;\n}\nexport function decodeUtf8(buffer) {\n    return Utf8Decoder.decode(buffer);\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream } from \"@yume-chan/adb\";\nimport { delay } from \"./utils.js\";\nexport class ScrcpyClientConnection {\n    constructor(device, options) {\n        this.device = device;\n        this.options = options;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.device.createSocket('localabstract:scrcpy');\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectVideoStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const socket = yield this.connectAndRetry();\n            const stream = new AdbBufferedStream(socket);\n            if (this.options.sendDummyByte) {\n                // server will write a `0` to signal connection success\n                yield stream.read(1);\n            }\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.connectVideoStream();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.connectAndRetry();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            const queue = new TransformStream();\n            this.streams = queue.readable.getReader();\n            const writer = queue.writable.getWriter();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, {\n                onSocket: (packet, stream) => {\n                    writer.write(stream);\n                },\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.streams.read()).value;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = new AdbBufferedStream(yield this.accept());\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.accept();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","export class FpsCounter {\n    constructor() {\n        this._value = 0;\n    }\n    get value() {\n        const value = this._value;\n        this._value = 0;\n        return value;\n    }\n    add() {\n        this._value += 1;\n    }\n}\n//# sourceMappingURL=types.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from \"@yume-chan/adb\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport { FpsCounter } from \"../types.js\";\nimport { createTinyH264Wrapper } from \"./wrapper.js\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        this._fpsCounter = new FpsCounter();\n        initialize();\n        this._renderer = document.createElement('canvas');\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        if (!this._initializer) {\n                            throw new Error('Decoder not initialized');\n                        }\n                        const wrapper = yield this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                }\n            })\n        });\n    }\n    get fpsCounter() { return this._fpsCounter; }\n    get renderer() { return this._renderer; }\n    get writable() { return this._writable; }\n    configure(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._renderer);\n                ;\n            }\n            const { encodedWidth, encodedHeight } = config;\n            const chromaWidth = encodedWidth / 2;\n            const chromaHeight = encodedHeight / 2;\n            this._renderer.width = config.croppedWidth;\n            this._renderer.height = config.croppedHeight;\n            const format = YuvBuffer.format({\n                width: encodedWidth,\n                height: encodedHeight,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: config.cropLeft,\n                cropTop: config.cropTop,\n                cropWidth: config.croppedWidth,\n                cropHeight: config.croppedHeight,\n                displayWidth: config.croppedWidth,\n                displayHeight: config.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = encodedWidth * encodedHeight;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                this._fpsCounter.add();\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, encodedWidth, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from '@yume-chan/adb';\nimport { FpsCounter } from \"../types.js\";\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        // Usually, browsers can decode most configurations,\n        // So let device choose best profile and level for itself.\n        this.maxProfile = undefined;\n        this.maxLevel = undefined;\n        this._fpsCounter = new FpsCounter();\n        this.animationFrame = 0;\n        this.render = () => {\n            if (this.lastFrame) {\n                this._fpsCounter.add();\n                this.context.drawImage(this.lastFrame, 0, 0);\n                this.lastFrame.close();\n                this.lastFrame = undefined;\n            }\n            this.animationFrame = requestAnimationFrame(this.render);\n        };\n        this._renderer = document.createElement('canvas');\n        this.context = this._renderer.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error() { },\n        });\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        this.decoder.decode(new EncodedVideoChunk({\n                            type: 'key',\n                            timestamp: 0,\n                            data: packet.data,\n                        }));\n                        break;\n                }\n            })\n        });\n    }\n    get fpsCounter() { return this._fpsCounter; }\n    get writable() { return this._writable; }\n    get renderer() { return this._renderer; }\n    configure(config) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","// cspell: ignore golomb\n// cspell: ignore qpprime\nclass BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { __awaiter } from \"tslib\";\nimport { BufferedStreamEndedError, ReadableStream, TransformStream } from \"@yume-chan/adb\";\nimport Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../../connection.js\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../../message.js\";\nimport { toScrcpyOptionValue } from \"../common.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const VideoPacket = new Struct()\n    .int64('pts')\n    .uint32('size')\n    .uint8Array('data', { lengthField: 'size' });\nexport const NoPts = BigInt(-1);\nexport const ScrcpyBackOrScreenOnEvent1_16 = new Struct()\n    .uint8('type', placeholder());\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectScroll)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumentOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(adb) {\n        const options = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(adb, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(adb, options);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    parseVideoStream(stream) {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return stream\n                .release()\n                .pipeThrough(new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: 'frame',\n                        data: chunk,\n                    });\n                },\n            }));\n        }\n        let header;\n        return new ReadableStream({\n            pull(controller) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        const { pts, data } = yield VideoPacket.deserialize(stream);\n                        if (pts === NoPts) {\n                            const sequenceParameterSet = parse_sequence_parameter_set(data.slice().buffer);\n                            const { profile_idc: profileIndex, constraint_set: constraintSet, level_idc: levelIndex, pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                            const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n                            const encodedHeight = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                            const cropLeft = frame_crop_left_offset * 2;\n                            const cropRight = frame_crop_right_offset * 2;\n                            const cropTop = frame_crop_top_offset * 2;\n                            const cropBottom = frame_crop_bottom_offset * 2;\n                            const croppedWidth = encodedWidth - cropLeft - cropRight;\n                            const croppedHeight = encodedHeight - cropTop - cropBottom;\n                            header = data;\n                            controller.enqueue({\n                                type: 'configuration',\n                                data: {\n                                    profileIndex,\n                                    constraintSet,\n                                    levelIndex,\n                                    encodedWidth,\n                                    encodedHeight,\n                                    cropLeft,\n                                    cropRight,\n                                    cropTop,\n                                    cropBottom,\n                                    croppedWidth,\n                                    croppedHeight,\n                                }\n                            });\n                            return;\n                        }\n                        let frameData;\n                        if (header) {\n                            frameData = new Uint8Array(header.byteLength + data.byteLength);\n                            frameData.set(header);\n                            frameData.set(data, header.byteLength);\n                            header = undefined;\n                        }\n                        else {\n                            frameData = data;\n                        }\n                        controller.enqueue({\n                            type: 'frame',\n                            data: frameData,\n                        });\n                    }\n                    catch (e) {\n                        if (e instanceof BufferedStreamEndedError) {\n                            controller.close();\n                            return;\n                        }\n                        throw e;\n                    }\n                });\n            }\n        });\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize(message);\n        }\n        return undefined;\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n//# sourceMappingURL=index.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyBackOrScreenOnEvent1_16, ScrcpyOptions1_16 } from \"./1_16/index.js\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnEvent1_16)\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumentOrder() {\n        return super.getArgumentOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize(message);\n    }\n}\n//# sourceMappingURL=1_18.js.map","// cspell: ignore autosync\nimport { ScrcpyOptions1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from \"./common.js\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection.js\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\nexport class ScrcpyOptions1_22 extends ScrcpyOptions1_21 {\n    constructor(init) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { downsizeOnError: true, sendDeviceMeta: true, sendDummyByte: true, rawVideoStream: false });\n    }\n    createConnection(device) {\n        var _a, _b, _c;\n        const defaultValue = this.getDefaultValue();\n        const options = {\n            control: (_a = this.value.control) !== null && _a !== void 0 ? _a : defaultValue.control,\n            sendDummyByte: (_b = this.value.sendDummyByte) !== null && _b !== void 0 ? _b : defaultValue.sendDummyByte,\n            sendDeviceMeta: (_c = this.value.sendDeviceMeta) !== null && _c !== void 0 ? _c : defaultValue.sendDeviceMeta,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n//# sourceMappingURL=1_22.js.map","import { __awaiter } from \"tslib\";\nimport { WrapWritableStream } from \"@yume-chan/adb\";\nimport { DEFAULT_SERVER_PATH } from \"./options/index.js\";\nexport function pushServer(device, options = {}) {\n    const { path = DEFAULT_SERVER_PATH } = options;\n    return new WrapWritableStream({\n        start() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const sync = yield device.sync();\n                return {\n                    writable: sync.write(path),\n                    state: sync,\n                };\n            });\n        },\n        close(sync) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield sync.dispose();\n            });\n        },\n    });\n}\n//# sourceMappingURL=push-server.js.map"],"names":["LayerHost","props","id","className","useUnmount","unmountFunction","unmountRef","current","window","__NEXT_P","push","cachedValue","SERVER_URL","toString","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","this","promise","fetch","downloaded","total","onProgress","event","response","reader","chunks","result","position","chunk","Number","parseInt","headers","get","fire","body","getReader","read","done","value","byteLength","reduce","item","Uint8Array","set","clamp","min","max","KeyRepeater","key","client","delay","interval","press","timeoutId","injectKeyCode","action","AndroidKeyEventAction","keyCode","repeat","metaState","setTimeout","intervalId","setInterval","onRelease","clearInterval","clearTimeout","release","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","navigationBarVisible","width","height","undefined","encoders","selectedEncoder","decoders","name","factory","TinyH264Decoder","selectedDecoder","decoder","resolution","bitRate","tunnelForward","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","homeKeyRepeater","appSwitchKeyRepeater","start","serverBuffer","options","globalState","state","Error","runInAction","catch","e","ReadableStream","controller","enqueue","close","pipeThrough","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","pipeTo","pushServer","ScrcpyClient","DEFAULT_SERVER_PATH","SCRCPY_SERVER_VERSION","ScrcpyOptions1_22","logLevel","ScrcpyLogLevel","sendDeviceMeta","sendDummyByte","length","maxSize","lockVideoOrientation","ScrcpyScreenOrientation","encoderName","codecOptions","CodecOptions","profile","maxProfile","level","maxLevel","formatServerArguments","join","stdout","WritableStream","write","line","videoStream","InspectStream","packet","type","data","croppedWidth","croppedHeight","writable","exit","then","stop","onClipboardChange","content","navigator","clipboard","writeText","message","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","pressBackOrTurnOnScreen","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","injectTouch","calculatePointerPosition","clientX","clientY","x","y","pointerType","BigInt","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","AndroidMotionEventAction","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","injectScroll","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","fpsIntervalId","handleKeyDown","code","match","injectText","Backspace","AndroidKeyCode","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","handleCurrentEncoderChange","handleSelectedDecoderChange","handleResolutionChange","handleTunnelForwardChange","handleBitRateChange","autorun","firstChild","remove","appendChild","renderer","fpsCounter","VideoDecoder","unshift","WebCodecsDecoder","commandBarItems","iconProps","iconName","Icons","text","onClick","disabled","enterFullscreen","commandBarFarItems","checked","iconOnly","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","dispose","element","addEventListener","passive","option","view","getBoundingClientRect","pointerViewX","pointerViewY","ConnectionDialog","observer","layerHostId","useId","useState","isClient","setIsClient","useEffect","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","label","percentComplete","description","formatSpeed","progressHidden","bottomElement","useMemo","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","transform","color","onPointerDown","onPointerUp","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","ref","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","map","index","Dropdown","selectedKey","placeholder","onChange","SpinButton","labelPosition","Position","step","Toggle","span","TooltipHost","Icon","DemoModePanel","ScrcpyControlMessageType","ScrcpyInjectTouchControlMessage","uint8","InjectTouch","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","ScrcpyInjectKeyCodeControlMessage","InjectKeycode","ClipboardMessage","constructor","adb","process","controlStream","clipboardChangeEvent","lastTouchMessage","_adb","_stdout","DecodeUtf8Stream","TransformStream","indexOf","substring","splitLines","_videoStream","parseVideoStream","_screenWidth","_screenHeight","buffered","AdbBufferedStream","_controlStreamWriter","getWriter","deserialize","_a","static","path","version","control","encoderNameRegex","getOutputEncoderNameRegex","connection","createConnection","initialize","subprocess","spawn","protocols","AdbNoneSubprocessProtocol","Promise","race","getStreams","kill","screenWidth","screenHeight","checkControlStream","caller","serialize","Object","assign","now","Date","Move","HoverMove","includes","buffer","serializeInjectScrollControlMessage","InjectScroll","serializeBackOrScreenOnControlMessage","BackOrScreenOn","AndroidCodecProfile","AndroidCodecLevel","time","resolve","globalThis","TextEncoder","TextDecoder","ScrcpyClientConnection","device","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","connectVideoStream","socket","stream","ScrcpyClientReverseConnection","reverse","queue","streams","readable","writer","address","add","onSocket","accept","FpsCounter","_value","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","super","addDisposable","handlePictureReady","onPictureReady","renderStateId","feed","postMessage","offset","cachedInitializePromise","all","YuvBuffer","default","YuvCanvas","Baseline","Level4","_fpsCounter","_renderer","document","createElement","_writable","configure","_initializer","slice","config","_yuvCanvas","attach","encodedWidth","encodedHeight","chromaWidth","chromaHeight","format","cropLeft","cropTop","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","resolver","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","array","frame","lumaPlane","chromaPlane","drawFrame","toHex","padStart","toUpperCase","animationFrame","render","lastFrame","context","drawImage","requestAnimationFrame","getContext","output","error","decode","EncodedVideoChunk","timestamp","profileIndex","constraintSet","levelIndex","codec","optimizeForLatency","cancelAnimationFrame","toScrcpyOptionValue","empty","toOptionValue","isScrcpyOptionValue","BitReader","bytePosition","bitPosition","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","entries","filter","VideoPacket","int64","uint8Array","NoPts","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyOptions1_16","Verbose","Debug","Initial","Unlocked","getArgumentOrder","getDefaultValue","maxFps","crop","sendFrameMeta","displayId","showTouches","stayAwake","defaults","header","pull","pts","sequenceParameterSet","cropRight","cropBottom","frameData","BufferedStreamEndedError","Down","ScrcpyBackOrScreenOnEvent1_18","fields","ScrcpyOptions1_18","concat","powerOffOnClose","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","rawVideoStream","downsizeOnError","_b","_c","defaultValue","WrapWritableStream","sync"],"sourceRoot":""}